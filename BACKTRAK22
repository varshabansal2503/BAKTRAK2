ANS:1--  N-QUEENS PROBLEM

import java.util.*;
public class Nqueens
{
    static int count=0;
    public static boolean issafe(char chessboard[][],int row,int col)
    {
         //vertically up

         for(int i=row-1;i>=0;i--)
         {
            if(chessboard[i][col]=='q')
            {
                return false;
            }
         }
         //diagonal left up
         for(int i=row-1, j=col-1;i>=0 && j>=0;i--,j--)
         {
            if(chessboard[i][j]=='q')
            {
                return false;
            }
         }
         //diag right up
          for(int i=row-1, j=col+1;i>=0 && j<chessboard.length;i--,j++)
         {
            if(chessboard[i][j]=='q')
            {
                return false;
            }
         }
         return true;

    }
    public static void plcequeens(char chessboard[][],int row)
    {
        if(row==chessboard.length)
        {
            System.out.println("------------------------------");
            printboard(chessboard);
            count++;
            return;
        }
        for(int j=0;j<chessboard.length;j++)
        {
           if(issafe(chessboard,row,j))
           {
               chessboard[row][j]='q';
            plcequeens(chessboard,row+1);
            chessboard[row][j]='.';
           }
        }
    }
    public static void printboard(char chessboard[][])
    {
        for(int i=0;i<chessboard.length;i++)
        {
            for(int j=0;j<chessboard.length;j++)
            {
                System.out.print(chessboard[i][j]+" ");
            }
            System.out.println();
        }
    }
    public static void main(String args[])
    {
        int n=4;
        char chessboard[][]=new char[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                chessboard[i][j]='.';
            }
        }
      
      //  printboard(chessboard);
      plcequeens(chessboard,0);
       System.out.println("total ways:"+count);

    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:2--
SHODUKO SOLVER
import java.util.*;
public class Sodukoslo
{
    public static boolean issafe(int shoduko[][],int row,int col,int digit)
    {
        //column 
        for(int i=0;i<=8;i++)
        {
            if(shoduko[i][col]==digit)
            {
                return false;
            }
        }
        //row
        for(int j=0;j<=8;j++)
        {
            if(shoduko[row][j]==digit)
            {
                return false;
            }
        }
        int sr=(row/3)*3;
        int sc=(col/3)*3;
        for(int i=sr;i<sr+3;i++)
        {
            for(int j=sc;j<sc+3;j++)
            {
       
            if(shoduko[i][col]==digit)
            {
                return false;
            }
      
            }
        }
        return true;
    }
    public static boolean sudukosolver(int shoduko[][],int row,int col)
    {
        if(row ==9 && col == 9)
        {
            return true;
        }else if(row==9)
        {
            return false;
        }
        int nextrow=row,nextcol=col+1;
        if(nextcol==9)
        {
            nextrow=row+1;
            nextcol=0;
        }
        if(shoduko[row][col]!=0)
        {
            return sudukosolver(shoduko,nextrow,nextcol);
        }
        for(int digit=1;digit<=9;digit++)
        {
            if(issafe(shoduko,row,col,digit))
            {
                shoduko[row][col]=digit;
                if(sudukosolver(shoduko,nextrow,nextcol))
                {
                    return true;
                }
                shoduko[row][col]=0;
            }
        }
    }
    public static void printsuduko(int shoduko[][])
    {
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                System.out.print(shoduko[i][j]+" ");
            }
           System.out.println();
        }
    }
    public static void main(String args[])
    {
        int shoduko[][]={
            {0,0,8,0,0,0,0,0,0},
            {4,9,0,1,5,7,0,0,2},
            {0,0,3,0,0,4,1,9,0},
            {1,8,5,0,6,0,0,2,0},
            {0,0,0,0,2,0,0,6,0},
            {9,6,0,4,0,5,3,0,0},
            {0,3,0,0,7,2,0,0,4},
            {0,4,9,0,3,0,0,5,7},
            {8,2,7,0,0,9,0,1,3}

          
        };
        if(sudukosolver(shoduko,0,0))
        {
            System.out.println("solution exisit");
            printsuduko(shoduko);
        }
        else
        {
            System.out.println("solution not exists");
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:3--
